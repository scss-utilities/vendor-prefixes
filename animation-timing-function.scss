/// What play-back function to apply to animation for element, class, or ID
/// @param {string} $value
/// @returns {CSS} - `Property: Value` with prefixed properties
/// @example - Available values
///   - `linear`:                  No speed differance between start and finish
///   - `ease`:                    Default, slow start to fast mid ans slow end
///   - `ease-in`:                 Slow start
///   - `ease-out`:                Slow end
///   - `ease-in-out`:             Equivalent to ease-in + ease-out
///   - `step-start`:              Equivalent to steps(1, start)
///   - `steps-end`:               Equivalent to steps(1, end)
///   - `steps(step, start, end)`: Much like Python range()
///   - `cubic-bezier(n, n, n, n)`: `n` maybe floats between 1 and 0
///   - `inital`
///   - `inherit`
/// @example scss - Usage of animation-timing-function
///   .example-class {
///     @include animation-timing-function($value: ease-in);
///   }
/// @example css - Resutls of animation-timing-function
///   .example-class {
///     -webkit-animation-timing-function: ease-in;
///        -moz-animation-timing-function: ease-in;
///          -o-animation-timing-function: ease-in;
///             animation-timing-function: ease-in;
///   }
/// @requires {mixin} render-vendor-prefixes
/// @author S0AndS0
/// @license AGPL-3.0
@mixin animation-timing-function($value) {
  @include render-vendor-prefixes(
    $property: animation-timing-function,
    $value: $value,
    $vendor-list: (
      -webkit,  // Chrome 43.0/4.0, Opera 30.0/15.0, Safari 9.0/4.0
      -moz,     // Firefox 16.0/5.0
      -o,       // Opera 12.0
    ),
    $prefix: property,
  );
}
