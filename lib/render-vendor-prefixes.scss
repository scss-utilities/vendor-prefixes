/// Outputs CSS from SCSS map generated by `map-vendor-prefixes`
/// @returns {CSS} - `Property: Value` from SCSS map
/// @param {string} $property  - The CSS property name
/// @param {*} $value          - Number, string, even CSS _function_ calls
/// @param {list} $vendor-list - List of vendor prefixes to pre-append
/// @param {string} $prefix    - Weather `string` or `value` should be pre-append to
/// @requires {function} map-vendor-prefixes
/// @throws Try `$prefix: property` or `$prefix: value` next time.
/// @example scss - Usage of render-vendor-prefixes
///   .example-class {
///     $mapped-vendors: map-vendor-prefixes(
///       $property: text-stroke-color,
///       $value: white,
///       $vendor-list: (-webkit, -o),
///       $prefix: property
///     );
///   }
/// @example css - Results of
///   .example-class {
///     -webkit-text-stroke-color: white,
///          -o-text-stroke-color: white,
///             text-stroke-color: white
///   }
/// @author S0AndS0
/// @license AGPL-3.0
@mixin render-vendor-prefixes(
  $property: false,
  $value: false,
  $vendor-list: false,
  $prefix: property,
){
  // Obtain formatted map of supplied input
  $vendor-prefixes: map-vendor-prefixes(
    $property: $property,
    $value: $value,
    $vendor-list: $vendor-list,
    $prefix: $prefix,
  );
  @if $prefix == 'property' {
    @each $p, $v in $vendor-prefixes {
      #{$p}: $v;
    }
  } @else if $prefix == 'value' {
    @each $v in map-get($vendor-prefixes, $property) {
      #{$property}: #{$v};
    }
  } @else {
    @warn "Help, I have been force fed bad input!";
    @error "Try '$prefix: property' or '$prefix: value' next time.";
  }
}
